#!/bin/bash
if [[ $(basename $(pwd)) == "bin" ]]; then
    cd ..
fi

if ! command -v juliaup &> /dev/null; then
    echo "Please install the Julia installer 'juliaup'!"
    echo "See: https://github.com/JuliaLang/juliaup"
    exit 1
fi

juliaup add 1.11
juliaup up 1.11
julia_version=$(julia --version | awk '{print($3)}')
julia_major=${julia_version:0:3} 
if [[ $julia_major == "1.1" ]]; then
    julia_major=${julia_version:0:4} 
fi

# Verify supported Julia versions (1.10 or 1.11)
if [[ "$julia_major" != "1.10" && "$julia_major" != "1.11" ]]; then
    echo "Warning: Unsupported Julia version detected: $julia_version. This script supports Julia 1.10 or 1.11 only." >&2
    echo "Use the command 'juliaup default 1.10' or 'juliaup default 1.11' to switch to a supported version." >&2
    exit 1
fi

echo "Installing package TestEnv in the global environment!"
julia --startup-file=no -e "using Pkg; Pkg.add(\"TestEnv\")"

export KMP_DUPLICATE_LIB_OK=TRUE

PYTHON_PATH=$(which python3)
if [ -x "$PYTHON_PATH" ]; then
    echo "Python is found at $PYTHON_PATH"
    if $PYTHON_PATH -c "import matplotlib" &> /dev/null; then
        echo "Matplotlib found. Using existing installation."
        export PYTHON=$PYTHON_PATH
    else
        echo "Matplotlib is not found."
        read -p "Do you want to install matplotlib with Conda? (y/n): " choice
        case "$choice" in 
          y|Y ) 
            export PYTHON=""
            ;;
          n|N ) 
            echo "Exiting without installing matplotlib."
            exit 1
            ;;
          * ) 
            echo "Invalid choice. Exiting."
            exit 1
            ;;
        esac
    fi
else
    echo "Python is not found."
    exit 1
fi

# total memory in kB
MEM=$(grep MemTotal /proc/meminfo | awk '{print $2}')

if (( $MEM <  15000000 )); then
    MASKED=$(systemctl is-enabled systemd-oomd)
    if [[ $MASKED == "masked" ]]; then
        echo "Already masked!"
    else
        sudo systemctl disable --now systemd-oomd
        sudo systemctl mask systemd-oomd
    fi
    export JULIA_IMAGE_THREADS=1
    export JULIA_PKG_PRESERVE_TIERED_INSTALLED=true
else
    export MPLBACKEND=qt5agg
fi


if test -f "kps-image-${julia_major}.so"; then
    mv bin/kps-image-${julia_major}.so bin/kps-image-${julia_major}.so.bak
fi

echo "Updating packages..."
if test -f "Manifest.toml"; then
   rm Manifest.toml
fi
julia --startup-file=no --pkgimages=no --project -e "using TestEnv; TestEnv.activate(); using Pkg; Pkg.add(\"PyCall\"); Pkg.build(\"PyCall\")"
if [[ $PYTHON == "" ]]; then
    julia --startup-file=no --pkgimages=no --project -e "using TestEnv; TestEnv.activate(); using Pkg; Pkg.add(\"Conda\"); using Conda; Conda.add(\"matplotlib\"); using ControlPlots"
fi
julia --startup-file=no --pkgimages=no --project -e "using Pkg; Pkg.update()"

julia --pkgimages=no --project -t auto -e "using Pkg; Pkg.precompile()"
julia --pkgimages=no --project -t auto --gcthreads=4,1 -e "include(\"./test/create_sys_image.jl\");"

mv kps-image_tmp.so bin/kps-image-${julia_major}.so
